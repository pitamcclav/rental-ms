// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Property {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  address     String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  units       Unit[]
  expenses    Expense[]
}

model Unit {
  id         String    @id @default(cuid())
  code       String    @unique
  name       String
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rentAmount Decimal   @db.Decimal(10, 2)
  status     String    @default("vacant") // vacant, occupied
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tenants    Tenant[]
  payments   Payment[]

  @@index([propertyId])
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String
  unitId    String
  unit      Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  startDate DateTime  // Date when tenant started renting (used for calculating due dates)
  status    String    @default("active") // active, inactive
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]

  @@index([unitId])
}

model Payment {
  id             String   @id @default(cuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId         String
  unit           Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  amount         Decimal  @db.Decimal(10, 2)
  paymentDate    DateTime
  periodStart    DateTime // Start of payment period
  periodEnd      DateTime // End of payment period
  monthsCovered  Int      // Number of months this payment covers
  status         String   @default("completed") // completed, pending
  paymentMethod  String?  // cash, bank_transfer, mobile_money, etc.
  reference      String?  // Payment reference number
  notes          String?  @db.Text
  receiptSent    Boolean  @default(false) // Whether email receipt was sent
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tenantId])
  @@index([unitId])
  @@index([status])
}

model Expense {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  description String
  amount      Decimal  @db.Decimal(10, 2)
  category    String   // maintenance, utilities, repairs, etc.
  date        DateTime
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([propertyId])
}
